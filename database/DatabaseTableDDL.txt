CREATE DATABASE `prototype` /*!40100 DEFAULT CHARACTER SET latin1 */;

/*
DROP TABLE prototype.valid_value;
DROP TABLE prototype.valid_values_list;
DROP TABLE prototype.user_account;
DROP TABLE prototype.address;
DROP TABLE prototype.credit_card_on_file;
DROP TABLE prototype.product_category_item;
DROP TABLE prototype.sales_order;
DROP TABLE prototype.sales_order_line;
DROP TABLE prototype.catalog_item;
DROP TABLE prototype.product_category;
DROP TABLE prototype.catalog_item;
DROP TABLE prototype.item;
DROP TABLE prototype.catalog;
DROP TABLE prototype.shipment;
DROP TABLE prototype.sales_invoice;
DROP TABLE prototype.sales_invoice_line;
*/

CREATE TABLE prototype.valid_values_list (
	VALID_VALUES_LIST_UID INT NOT NULL AUTO_INCREMENT,
	LIST_NAME VARCHAR(50),
	PRIMARY KEY (VALID_VALUES_LIST_UID),
	UNIQUE INDEX VALID_VALUES_LIST_UID (VALID_VALUES_LIST_UID ASC),
	UNIQUE INDEX VALID_VALUES_LIST_NAME (LIST_NAME ASC)
);

CREATE TABLE prototype.valid_value (
		VALID_VALUE_UID INT NOT NULL AUTO_INCREMENT,
		VALID_VALUES_LIST_UID INT NOT NULL,
		LIST_VALUE VARCHAR(12) NOT NULL,
		VALUE_DESCRIPTION VARCHAR(255) NOT NULL,
		PRIMARY KEY (VALID_VALUE_UID),
		INDEX VALID_VALUE_LIST (VALID_VALUES_LIST_UID),
		INDEX VALID_VALUE_VALUE (LIST_VALUE),
		INDEX VALID_VALUE_LIST_VALUE (VALID_VALUES_LIST_UID, LIST_VALUE)
);

CREATE TABLE prototype.user_account (
  USER_ACCOUNT_UID INT NOT NULL AUTO_INCREMENT,
  IS_ACTIVE BIT(1) NOT NULL,
  USER_NAME VARCHAR(25) NOT NULL,
  PASSWORD VARCHAR(25) NOT NULL,
  FIRST_NAME VARCHAR(30) NOT NULL,
  LAST_NAME VARCHAR(50) NOT NULL,
  EMAIL_ADDRESS VARCHAR(60) NOT NULL,
  PRIMARY KEY (USER_ACCOUNT_UID),
  UNIQUE INDEX USER_ACCOUNT_UID_UNIQUE (USER_ACCOUNT_UID ASC),
  UNIQUE INDEX USER_NAME (USER_NAME ASC));

  CREATE TABLE prototype.address (
  ADDRESS_UID INT NOT NULL AUTO_INCREMENT,
  USER_ACCOUNT_UID INT NOT NULL,
  IS_DEFAULT_SHIP_TO BIT(1) NULL,
  IS_DEFAULT_BILL_TO BIT(1) NULL,
  STREET_NUMBER VARCHAR(10) NOT NULL,
  STREET_NAME VARCHAR(50) NOT NULL,
  UNIT_NUMBER VARCHAR(5) NULL,
  CITY VARCHAR(50) NOT NULL,
  STATE VARCHAR(2) NOT NULL,
  ZIP_CODE INT NOT NULL,
  PRIMARY KEY (ADDRESS_UID),
  UNIQUE INDEX ADDRESS_UID_UNIQUE (ADDRESS_UID ASC),
  INDEX USER_ACCOUNT_UID (USER_ACCOUNT_UID ASC),
  CONSTRAINT USER_ACCOUNT_UID
    FOREIGN KEY (USER_ACCOUNT_UID)
    REFERENCES prototype.user_account (USER_ACCOUNT_UID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
	
CREATE TABLE prototype.credit_card_on_file (
	CC_ON_FILE_UID INT NOT NULL AUTO_INCREMENT,
	USER_ACCOUNT_UID INT NOT NULL,
	CARD_TYPE VARCHAR(20) NOT NULL,
	NAME_ON_CARD VARCHAR(60) NOT NULL,
	CARD_NUMBER VARCHAR(15) NOT NULL,
	CSV INT NOT NULL,
	EXPIRATION_DATE DATETIME NOT NULL,
	PRIMARY KEY (CC_ON_FILE_UID),
    UNIQUE INDEX CC_ON_FILE_UID_UNIQUE (CC_ON_FILE_UID ASC),
	INDEX USER_ACCOUNT_UID (USER_ACCOUNT_UID ASC),
	CONSTRAINT CC_USER_ACCOUNT_UID
		FOREIGN KEY (USER_ACCOUNT_UID)
		REFERENCES prototype.user_account (USER_ACCOUNT_UID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
);

CREATE TABLE prototype.sales_order (
  SALES_ORDER_UID INT NOT NULL AUTO_INCREMENT,
  ORDER_NUMBER VARCHAR(25) NOT NULL,
  USER_ACCOUNT_UID INT,
  SALES_ORDER_DATE DATETIME NOT NULL,
   SALES_ORDER_STATUS VARCHAR(12) NOT NULL,
    SHIP_TO_STREET_NUMBER INT NOT NULL,
    SHIP_TO_STREET_NAME VARCHAR(50) NOT NULL,
    SHIP_TO_UNIT_NUMBER VARCHAR(5),
    SHIP_TO_CITY VARCHAR(50) NOT NULL,
    SHIP_TO_STATE VARCHAR(2) NOT NULL,
    SHIP_TO_ZIP_CODE INT NOT NULL,
	BILL_TO_FIRST_NAME VARCHAR(30) NOT NULL,
    BILL_TO_LAST_NAME VARCHAR(50) NOT NULL,
    BILL_TO_STREET_NUMBER INT NOT NULL,
    BILL_TO_STREET_NAME VARCHAR(50) NOT NULL,
    BILL_TO_UNIT_NUMBER VARCHAR(5),
    BILL_TO_CITY VARCHAR(50) NOT NULL,
    BILL_TO_STATE VARCHAR(2) NOT NULL,
    BILL_TO_ZIP_CODE INT NOT NULL,
    PROMO_CODE VARCHAR(6),
	CREDIT_CARD_TYPE VARCHAR(20) NOT NULL,
	NAME_ON_CREDIT_CARD VARCHAR(60) NOT NULL,
	CREDIT_CARD_NUMBER VARCHAR(15) NOT NULL,
	CREDIT_CARD_CSV INT NOT NULL,
	CREDIT_CARD_EXPIRY_MONTH VARCHAR(2) NOT NULL,
	CREDIT_CARD_EXPIRY_YEAR VARCHAR(4) NOT NULL,
	EMAIL_ADDRESS VARCHAR(60) NOT NULL,
    DISCOUNT DECIMAL(6,2),
    SALES_TAX DECIMAL(6,2),
    SHIPPING DECIMAL(6,2),
    SUB_TOTAL DECIMAL(6,2),
    TOTAL DECIMAL(6,2),
    LAST_UPDATED_TIME DATETIME NOT NULL,
    PRIMARY KEY (SALES_ORDER_UID),
    UNIQUE INDEX SALES_ORDER_UID (SALES_ORDER_UID ASC),
	UNIQUE INDEX SALES_ORDER_NUMBER (ORDER_NUMBER ASC),
    INDEX USER_ACCOUNT_UID (USER_ACCOUNT_UID),
    INDEX SALES_ORDER_DATE (SALES_ORDER_DATE ASC)
);

CREATE TABLE prototype.catalog (
	CATALOG_UID INT NOT NULL AUTO_INCREMENT,
	VALID_FROM DATETIME NOT NULL,
	VALID_THROUGH DATETIME,
	PRIMARY KEY (CATALOG_UID),
	UNIQUE INDEX CATALOG_UID (CATALOG_UID)
);

CREATE TABLE prototype.product_category (
	PRODUCT_CATEGORY_UID INT NOT NULL AUTO_INCREMENT,
	PARENT_PRODUCT_CATEGORY_UID INT,
	CATEGORY_NAME VARCHAR(30) NOT NULL,
	CATEGORY_DESCRIPTION VARCHAR(255) NOT NULL,
	PRIMARY KEY (PRODUCT_CATEGORY_UID),
	UNIQUE INDEX PRODUCT_CATEGORY_UID (PRODUCT_CATEGORY_UID),
	INDEX PARENT_PRODUCT_CATEGORY_UID (PARENT_PRODUCT_CATEGORY_UID)
);

CREATE TABLE prototype.item (
	ITEM_UID INT NOT NULL AUTO_INCREMENT,
	PRODUCT_CATEGORY_UID INT NOT NULL,
	PRODUCT_NAME VARCHAR(60) NOT NULL,
	PRODUCT_DESCRIPTION VARCHAR(255) NOT NULL,
	PRIMARY KEY (ITEM_UID),
	UNIQUE INDEX ITEM_UID (ITEM_UID ASC),
	INDEX PRODUCT_CATEGORY_UID (PRODUCT_CATEGORY_UID ASC)
);

CREATE TABLE prototype.catalog_item (
	CATALOG_ITEM_UID INT NOT NULL AUTO_INCREMENT,
	ITEM_UID INT NOT NULL,
	CATALOG_UID INT NOT NULL,
	ITEM_PRICE DECIMAL(5,2) NOT NULL,
	PRIMARY KEY (CATALOG_ITEM_UID),
	UNIQUE INDEX CATALOG_ITEM_UID (CATALOG_ITEM_UID),
	INDEX ITEM_UID (ITEM_UID),
	INDEX CATALOG_UID (CATALOG_UID),
	CONSTRAINT ITEM_UID
		FOREIGN KEY (ITEM_UID)
		REFERENCES prototype.item (ITEM_UID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	CONSTRAINT CATALOG_UID
		FOREIGN KEY (CATALOG_UID)
		REFERENCES prototype.catalog (CATALOG_UID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
);

CREATE TABLE prototype.product_category_item (
	PRODUCT_CATEGORY_ITEM_UID INT NOT NULL AUTO_INCREMENT,
	PRODUCT_CATEGORY_UID INT NOT NULL,
	ITEM_UID INT NOT NULL,
	PRIMARY KEY (PRODUCT_CATEGORY_ITEM_UID),
	UNIQUE INDEX PRODUCT_CATEGORY_ITEM_UID (PRODUCT_CATEGORY_ITEM_UID),
	UNIQUE INDEX (PRODUCT_CATEGORY_UID, ITEM_UID),
	INDEX ITEM_UID (ITEM_UID),
	CONSTRAINT PCI_ITEM_UID
		FOREIGN KEY (ITEM_UID)
		REFERENCES prototype.item (ITEM_UID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	CONSTRAINT PCI_PRODUCT_CATEGORY_UID
		FOREIGN KEY (PRODUCT_CATEGORY_UID)
		REFERENCES prototype.product_category (PRODUCT_CATEGORY_UID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
);

CREATE TABLE prototype.sales_invoice (
	SALES_INVOICE_UID INT NOT NULL AUTO_INCREMENT,
	INVOICE_STATUS VARCHAR(12) NOT NULL,
	INVOICE_DATE DATETIME NOT NULL,
	INVOICE_AMOUNT DECIMAL(5,2) NOT NULL,
        LAST_UPDATED_TIME DATETIME NOT NULL,
	PRIMARY KEY (SALES_INVOICE_UID),
	UNIQUE INDEX SALES_INVOICE_UID (SALES_INVOICE_UID)
);

CREATE TABLE prototype.shipment (
	SHIPMENT_UID INT NOT NULL AUTO_INCREMENT,
	SHIPMENT_STATUS VARCHAR(12) NOT NULL,
	SHIPPER VARCHAR(50) NOT NULL,
	SHIPPER_TRACKING_NUMBER VARCHAR(40) NOT NULL,
	SHIPPED_DATE DATETIME,
	DELIVERED_DATE DATETIME,
	SALES_INVOICE_UID INT,
        LAST_UPDATED_TIME DATETIME NOT NULL,
	PRIMARY KEY (SHIPMENT_UID),
	UNIQUE INDEX SHIPMENT_UID (SHIPMENT_UID),
	INDEX SALES_INVOICE_UID (SALES_INVOICE_UID),
	CONSTRAINT SALES_INVOICE_UID
		FOREIGN KEY (SALES_INVOICE_UID)
		REFERENCES prototype.sales_invoice (SALES_INVOICE_UID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
);

CREATE TABLE prototype.sales_order_line (
	SALES_ORDER_LINE_UID INT NOT NULL AUTO_INCREMENT,
	SALES_ORDER_UID INT NOT NULL,
	CATALOG_ITEM_UID INT NOT NULL,
	ITEM_QUANTITY INT NOT NULL,
        ITEM_PRICE DECIMAL(5,2) NOT NULL,
	EXTENDED_PRICE DECIMAL(5,2) NOT NULL,
	SHIPMENT_UID INT,
	PRIMARY KEY (SALES_ORDER_LINE_UID),
	UNIQUE INDEX SALES_ORDER_LINE_UID (SALES_ORDER_LINE_UID),
    INDEX SHIPMENT_UID (SHIPMENT_UID)
);

insert into prototype.user_account (is_active, user_name, password, first_name, last_name, email_address)
values (1, "mmouse", "mmouse", "Mickey", "Mouse", "test@techexpertconsulting.com");
insert into prototype.user_account (is_active, user_name, password, first_name, last_name, email_address)
values (1, "dduck", "dduck", "Donald", "Duck", "test@techexpertconsulting.com");

insert into prototype.valid_values_list (valid_values_list_uid, list_name) values (1, "State");
insert into prototype.valid_value (valid_values_list_uid, list_value, value_description) values (1, "AZ", "Arizona");
insert into prototype.valid_value (valid_values_list_uid, list_value, value_description) values (1, "CA", "California");
insert into prototype.valid_value (valid_values_list_uid, list_value, value_description) values (1, "CO", "Colorado");
insert into prototype.valid_value (valid_values_list_uid, list_value, value_description) values (1, "NM", "New Mexico");
insert into prototype.valid_value (valid_values_list_uid, list_value, value_description) values (1, "NV", "Nevada");
insert into prototype.valid_value (valid_values_list_uid, list_value, value_description) values (1, "UT", "Utah");
insert into prototype.valid_value (valid_values_list_uid, list_value, value_description) values (1, "WY", "Wyoming");

INSERT INTO `prototype`.`catalog` (`CATALOG_UID`, `VALID_FROM`, `VALID_THROUGH`) VALUES ('1', 
STR_TO_DATE('01/01/2015', '%m/%d/%Y'), 
STR_TO_DATE('06/30/2015', '%m/%d/%Y'));

INSERT INTO `prototype`.`item` (`ITEM_UID`, `PRODUCT_CATEGORY_UID`, `PRODUCT_NAME`, `PRODUCT_DESCRIPTION`) VALUES ('1', '1', 'Test', 'Product used for testing');

INSERT INTO `prototype`.`item` (`ITEM_UID`, `PRODUCT_CATEGORY_UID`, `PRODUCT_NAME`, `PRODUCT_DESCRIPTION`) VALUES ('2', '1', 'Test-2', 'Second test Product');


INSERT INTO `prototype`.`product_category` (`PRODUCT_CATEGORY_UID`, `PARENT_PRODUCT_CATEGORY_UID`, `CATEGORY_NAME`, `CATEGORY_DESCRIPTION`) VALUES ('1', '1', 'Test Category', 'Product Category for testing');


INSERT INTO `prototype`.`catalog_item` (`CATALOG_ITEM_UID`, `ITEM_UID`, `CATALOG_UID`, `ITEM_PRICE`) VALUES ('1', '1', '1', '5.00');
INSERT INTO `prototype`.`catalog_item` (`CATALOG_ITEM_UID`, `ITEM_UID`, `CATALOG_UID`, `ITEM_PRICE`) VALUES ('2', '2', '1', '4.00');
